use std::os::fd::RawFd;

#[derive(Clone, Copy, PartialEq, Eq, Hash)]
pub enum PollId {
    Client(RawFd),
    Socket,
}

// When converting PollId <=> u64, the four biggest bytes denote the enum variant, and the smallest four bytes
// denote the enum value, if any.
const POLL_TAG_MASK: u64   = 0xffff0000;
const POLL_VALUE_MASK: u64 = 0x0000ffff;
const POLL_CLIENT_TAG: u64 = 0x00010000;
const POLL_SOCKET_TAG: u64 = 0x00020000;

impl Into<u64> for PollId {
    fn into(self) -> u64 {
        match self {
            PollId::Client(value) => POLL_CLIENT_TAG | (value as u64),
            PollId::Socket => POLL_SOCKET_TAG,
        }
    }
}

/// Returned when trying to construct a PollId from an u64 that couldn't possibly have been generated by poll_id.into().
#[derive(Debug)]
pub struct InvalidPollId;

impl TryFrom<u64> for PollId {
    type Error = InvalidPollId;

    fn try_from(value: u64) -> Result<Self, Self::Error> {
        match value & POLL_TAG_MASK {
            POLL_CLIENT_TAG => Ok(PollId::Client((value & POLL_VALUE_MASK) as _)),
            POLL_SOCKET_TAG => match value & POLL_VALUE_MASK {
                0 => Ok(PollId::Socket),
                _ => Err(InvalidPollId),
            }
            _ => Err(InvalidPollId),
        }
    }
}
